---
title: "Get started"
format: live-html
engine: knitr
webr:
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

# Your personal R environment

Below you can see R running in the browser. 
It is not as powerful as if we install R on the machine, but it spares us the hassle of setting R up on every of your Computers.
You can type some simple math to try it out!
You can run single lines by pressing `Ctrl` + `Enter`.

```{webr}
1+1
```

# exploring objects

You can assign values to all kind of object names.
There are certain restrictions, for example an object name can not start with a number.
One weird thing in `R` is, that is uses the arrow operator (`<-`) for assignments and not the equal sign (`=`).
The `=` is used to set an argument value.
It's all about Environments and Workspace, but it is also a little confusing.
While it does not matter out in the wild that much, it is sometimes important and keeps things clear.
You may come to love it someday.

Below, we are assigning the value `1` to an object `a`.

```{webr}
a <- 1
```

Not very impressive is it?
You do not see anything, and that is ok.
`R` does not on default print anything, but we can of course explore the object.

```{webr}
print(a)
```

If we assign a value to a new object, we can also print this, but what if we forgot the objects we have assigend?
In an IDE we would have a viewer that shows the objects, but we do not have this in webR - a small trade-off that comes with you being able to use this in the browser.
But we can use the `ls()` command to show all objects in the workspace (Linux users may find this familiar)

```{webr}
b <- 2

ls()

```



# loading libraries

As most open source software, R builds upon loading libraries. 
Usually those are found on [CRAN](https://cran.r-project.org/), but in our case they need to be provided.
Let's try loading libraries!

```{webr}
library(dplyr)
```

Here we have loaded the [dplyr](https://dplyr.tidyverse.org/) package, which is used for data manipulation.
It is part of the much bigger [tidyverse](https://www.tidyverse.org/).
Since the packages always have to be installed, we will not use the more extensive command `library(tidyverse)`.
This would trigger to install a lot of packages.
If you want to do this on your own machine, please do so

# The Virtual File System (VFS)

We can explore the VFS a little by using the `getwd()` and the `list.files()` command.
There you can see the `flights.csv` file that we read in before!


```{webr}
getwd()

list.files()
```

Below we can output the structure of the complete VFS - but watch out, it is a lengthy command.
When you output the complete VFS - what do you notice?

```{webr}
list.files('/', full = TRUE, recursive = TRUE)

```

# The pipe

The pipe is a powerful operator and you will encounter it sooner or later.
There are two pipe operators.
The one you will find the most in documentation or on [SO](https://stackoverflow.com/) is the first pipe that has been introduced: `%>%`.
It is not native to `R` and is provided by the package [magrittr](https://magrittr.tidyverse.org/).
The pipe became so popular, that it is now provided with `Base R`, but the characters differ: `|>`.
In the documents you will find a happy mix of different pipes, just treat them as the same for now.
The base pipe can be used with classical *non*-tidyverse functions, that do not take data as the first input.
You do not have to care too much about that detail now, but it is good to know.

## Basic piping

* `x |> f` is equivalent to `f(x)`
* `x |> f(y)` is equivalent to `f(x,y)`
* `x |> f |> g |> h` is equivalent to `h(g(f(x)))`

## examples

```{webr}
mean(5)
5 |> mean()

```

```{webr}
vec <- c(5,3)

vec |> mean() |> sum()

vec |> sum() |> mean()

```

