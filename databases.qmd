---
title: "Databases"
format: live-html
engine: knitr
resources: 
  - "data"
webr:
    packages:
      - duckdb
      - dbplyr
      - dplyr
    resources:
      - data/mtcars.duckdb
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

# loading data

As with API's a *real* connection to a remote database is right now not feasible using webR.
But we can use *duckDB* which is a fast in-process analytical database.
It has one more advantage: It is locally hosted, which means it is a physical file on your machine.
We also use [dbplyr](https://dbplyr.tidyverse.org/) which is a database backend that uses the same or similar logic as *dplyr* for data manipulation with remote data sources.

```{webr-r}
library(duckdb)
library(dbplyr)

ddb_con <- dbConnect(duckdb(), dbdir = "data/mtcars.duckdb", read_only = FALSE)

mtcars <- tbl(ddb_con,"mtcars_table") |> collect()

```

# inspecting the data

Use some of the commands you have already learned to inspect the data!
You are on your own here, have fun.

```{webr}

```

The data is well documented, since it is a fairly common toy dataset in `R`, so you can find some documentation on it [here](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars).

We have just made it available via a `duckdb` in-process database, you can also retrieve that data by typing this command.
This would take the fun out of playing around with databases though.

```{r}
#| eval: false

data(mtcars)
```


# plotting data

So did it work? 
You can query the object using the same commands as described above.
Another way is of course to plot it, but that is hard when we do not know what variables are in the dataset.
Sometimes in those cases, the R base plotting is an excellent way of doing some quick E(xplorative)D(ata)A(nalysis)

```{webr}

plot(mtcars)

```

## play around

You can try to use ggplot on the data.
The code below shall give you inspiration on how to start.
Maybe you want to use the `shape` aesthetic?

```{webr}
mtcars |> 
  ggplot(
    aes(
      x = cyl,
      y = hp
    )
  )+
  geom_point()
```


